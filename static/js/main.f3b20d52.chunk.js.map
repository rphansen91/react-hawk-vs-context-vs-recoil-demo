{"version":3,"sources":["todoUtils.tsx","DataHocTodos/controls.tsx","Components/Todos/List.tsx","Components/Todos/Item.tsx","Components/Todos/Create.tsx","Components/Todos/Update.tsx","DataHocTodos/index.tsx","RecoilTodos/atoms.tsx","RecoilTodos/index.tsx","RecoilTodos/actions.tsx","HawkTodos/state.tsx","HawkTodos/index.tsx","HawkTodos/actions.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["wait","time","Promise","res","setTimeout","buildTodo","text","complete","id","uuid","initialTodoList","DataHocTodoListControls","contextControllerHOC","useState","createText","setCreateText","updateText","setUpdateText","page","setPage","perPage","setPerPage","useAsyncState","create","createActions","save","saveActions","updating","setUpdating","todoList","setTodoList","pagedTodoCount","Math","ceil","length","pagedTodoList","slice","createTodo","a","setLoading","Error","newTodo","list","concat","setData","setError","message","saveTodo","todo","update","todoIndex","findIndex","_todo","newList","closeUpdate","updateTodo","removeTodo","filter","toggleTodo","map","title","action","children","footer","Paper","CardHeader","Divider","List","CardActions","style","justifyContent","ListItem","button","onClick","key","Checkbox","checked","onChange","ListItemText","primary","primaryTypographyProps","color","textDecoration","ListItemSecondaryAction","IconButton","setText","loading","error","onSubmit","ev","preventDefault","Box","display","alignItems","TextField","variant","label","value","target","helperText","Boolean","size","ml","type","LoadingFab","disabled","props","Fab","position","CircularProgress","top","left","height","width","open","saveText","onClose","Dialog","maxWidth","fullWidth","DialogTitle","DialogContent","DialogActions","Button","LinearProgress","DataHocTodoList","Provider","Context","Consumer","controls","Pagination","count","nextPage","createTextState","atom","default","createState","data","updateTextState","saveState","updatingState","todoListState","pageState","perPageState","pagedTodoCountState","selector","get","pagedTodoListState","RecoilList","useRecoilValue","pageCount","useSetRecoilState","setCreate","useCreateTodo","useUpdateTodo","useToggleTodo","useRemoveTodo","RecoilUpdate","setSave","useSaveTodo","useCloseUpdate","RecoilTodoList","hawk","hawkeye","HawkList","useHawkState","useHawkSetState","HawkUpdate","HawkTodoList","background","App","href","right","src","className","alt","data-recalc-dims","padding","flexDirection","boxSizing","Typography","p","Grid","container","spacing","item","md","paddingTop","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.f3b20d52.chunk.js","sourcesContent":["import { v4 as uuid } from 'uuid'\n\nexport interface ITodo {\n  id: string;\n  text: string;\n  complete: boolean;\n}\n\nexport function generateId () {\n  return uuid()\n}\n\nexport function wait (time = 0) {\n  return new Promise((res) => setTimeout(() => res(), time))\n}\n\nexport function buildTodo (text: string): ITodo {\n  return {\n    text,\n    complete: false,\n    id: generateId(),\n  }\n}\n\nexport const initialTodoList = [\n  buildTodo('a'),\n  buildTodo('b'),\n  buildTodo('c'),\n  buildTodo('d'),\n  buildTodo('e'),\n  buildTodo('f'),\n  buildTodo('g'),\n  buildTodo('h'),\n  buildTodo('i'),\n  buildTodo('j'),\n  buildTodo('k'),\n  buildTodo('l'),\n  buildTodo('m'),\n  buildTodo('n'),\n  buildTodo('o'),\n  buildTodo('p'),\n]","import { useState } from \"react\";\nimport { contextControllerHOC, useAsyncState } from \"data-hoc\";\nimport { ITodo, wait, initialTodoList, buildTodo } from \"../todoUtils\";\n\nexport const DataHocTodoListControls = contextControllerHOC(useTodoListControls);\nexport default DataHocTodoListControls\n\nexport function useTodoListControls() {\n  const [createText, setCreateText] = useState(\"\");\n  const [updateText, setUpdateText] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(10);\n  const [create, createActions] = useAsyncState<ITodo>();\n  const [save, saveActions] = useAsyncState<ITodo>();\n  const [updating, setUpdating] = useState<ITodo | null>(null);\n  const [todoList, setTodoList] = useState<ITodo[]>(initialTodoList);\n  const pagedTodoCount = Math.ceil(todoList.length / perPage);\n  const pagedTodoList = todoList.slice((page - 1) * perPage, (page - 1) * perPage + perPage)\n  const createTodo = async (text: string) => {\n    try {\n      createActions.setLoading();\n      if (!text) {\n        throw new Error(\"Text is required\");\n      }\n      const newTodo = buildTodo(text)\n      await wait(1000);\n      setTodoList((list) => list.concat(newTodo));\n      setCreateText(\"\");\n      createActions.setData(newTodo);\n      return newTodo;\n    } catch (e) {\n      createActions.setError(e.message);\n    }\n  };\n  const saveTodo = async (todo: ITodo | null, update: Partial<ITodo>) => {\n    try {\n      saveActions.setLoading();\n      const todoIndex = todoList.findIndex(_todo => todo === _todo)\n      if (todoIndex === -1) {\n        throw new Error(\"Todo not found\");\n      }\n      if (typeof update.text === 'string' && !update.text) {\n        throw new Error(\"Text is required\");\n      }\n      const newTodo = { ...todoList[todoIndex], ...update }\n      const newList = todoList.slice(0)\n      newList[todoIndex] = newTodo\n      await wait(1000);\n      setTodoList(newList);\n      closeUpdate();\n      saveActions.setData(newTodo);\n      return newTodo;\n    } catch (e) {\n      saveActions.setError(e.message);\n    }\n  };\n  const removeTodo = (todo: ITodo): ITodo => {\n    setTodoList((list) => list.filter((_todo) => todo !== _todo));\n    return todo;\n  };\n  const toggleTodo = (todo: ITodo): ITodo => {\n    setTodoList((list) =>\n      list\n        .slice(0)\n        .map((_todo) =>\n          todo !== _todo ? _todo : { ..._todo, complete: !_todo.complete }\n        )\n    );\n    return todo;\n  };\n  const updateTodo = (todo: ITodo) => {\n    setUpdateText(todo.text);\n    setUpdating(todo);\n  };\n  const closeUpdate = () => setUpdating(null);\n  return {\n    page,\n    setPage,\n    perPage,\n    setPerPage,\n    createText,\n    setCreateText,\n    updateText,\n    setUpdateText,\n    create,\n    save,\n    todoList,\n    pagedTodoCount,\n    pagedTodoList,\n    updating,\n    closeUpdate,\n    updateTodo,\n    createTodo,\n    removeTodo,\n    toggleTodo,\n    saveTodo,\n  };\n}\n","import CardActions from \"@material-ui/core/CardActions\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Divider from \"@material-ui/core/Divider\";\nimport List from \"@material-ui/core/List\";\nimport Paper from \"@material-ui/core/Paper\";\nimport React, { ReactNode } from \"react\";\n\nexport interface ITodoListProps {\n  title: string;\n  action?: ReactNode\n  children?: ReactNode\n  footer?: ReactNode\n}\n\nexport default ({\n  title,\n  action,\n  children,\n  footer\n}: ITodoListProps) => {\n  return (\n    <Paper>\n      <CardHeader\n        title={title}\n        action={action}\n      />\n      <Divider />\n      <List>\n        {children}\n      </List>\n      <Divider />\n      <CardActions style={{ justifyContent: 'flex-end' }}>\n        {footer}\n      </CardActions>\n    </Paper>\n  );\n};\n","import Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport React from \"react\";\nimport { ITodo } from \"../../todoUtils\";\n\nexport interface ITodoItemProps {\n  todo: ITodo;\n  updateTodo: (todo: ITodo) => any;\n  removeTodo: (todo: ITodo) => any;\n  toggleTodo: (todo: ITodo) => any;\n}\n\nexport default ({ todo, toggleTodo, updateTodo, removeTodo }: ITodoItemProps) => {\n  return (\n    <ListItem button onClick={() => toggleTodo(todo)} key={todo.id}>\n      <Checkbox checked={todo.complete} onChange={() => toggleTodo(todo)} />\n      <ListItemText\n        primary={todo.text}\n        primaryTypographyProps={\n          todo.complete\n            ? { color: \"secondary\", style: { textDecoration: \"line-through\" } }\n            : {}\n        }\n      />\n      <ListItemSecondaryAction>\n        <IconButton onClick={() => updateTodo(todo)}>\n          <EditIcon />\n        </IconButton>\n        <IconButton onClick={() => removeTodo(todo)}>\n          <CancelIcon />\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n","import Box from \"@material-ui/core/Box\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Fab, { FabProps } from \"@material-ui/core/Fab\";\nimport TextField from \"@material-ui/core/TextField\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport React, { FC } from \"react\";\n\nexport interface ITodoCreateProps {\n  text: string;\n  setText: (text: string) => void;\n  createTodo: (text: string) => any;\n  loading?: boolean;\n  error?: string;\n}\n\nexport default ({\n  text,\n  setText,\n  createTodo,\n  loading,\n  error,\n}: ITodoCreateProps) => {\n  return (\n    <form\n      onSubmit={(ev) => {\n        ev.preventDefault();\n        createTodo(text);\n      }}\n    >\n      <Box display=\"flex\" alignItems=\"center\">\n        <TextField\n          variant=\"outlined\"\n          label=\"Create new item\"\n          value={text}\n          onChange={(ev) => setText(ev.target.value)}\n          helperText={error}\n          error={Boolean(error)}\n          size=\"small\"\n        />\n        <Box ml={1}>\n          <LoadingFab type=\"submit\" size=\"small\" color=\"primary\" loading={loading}>\n            <AddIcon />\n          </LoadingFab>\n        </Box>\n      </Box>\n    </form>\n  );\n};\n\nconst LoadingFab: FC<FabProps & { loading?: boolean }> = ({\n  disabled,\n  loading,\n  style,\n  children,\n  ...props\n}) => {\n  return (\n    <Fab\n      {...props}\n      disabled={disabled || loading}\n      style={{ position: \"relative\", ...style }}\n    >\n      {loading ? (\n        <CircularProgress\n          style={{\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            height: \"100%\",\n            width: \"100%\",\n          }}\n        />\n      ) : null}\n      {children}\n    </Fab>\n  );\n};\n","import React from \"react\";\nimport Dialog, { DialogProps } from \"@material-ui/core/Dialog\";\nimport DialogTitle, { DialogTitleProps } from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nexport interface IUpdateTodoProps {\n  open: boolean;\n  onClose: () => any;\n  text: string;\n  setText: (v: string) => any;\n  saveText: (v: string) => any;\n  loading: boolean;\n  error: string;\n}\n\nexport default ({\n  open,\n  text,\n  setText,\n  saveText,\n  onClose,\n  loading,\n  error,\n}: IUpdateTodoProps) => {\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        Update item\n      </DialogTitle>\n      <DialogContent>\n        <form\n          onSubmit={(ev) => {\n            ev.preventDefault();\n            saveText(text);\n          }}\n        >\n          <TextField\n            variant=\"outlined\"\n            value={text}\n            onChange={(ev) => setText(ev.target.value)}\n            helperText={error}\n            error={Boolean(error)}\n            fullWidth\n          />\n        </form>\n      </DialogContent>\n      <DialogActions>\n        <Button variant=\"contained\" onClick={onClose}>\n          Close\n        </Button>\n\n        <Box ml={1}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => saveText(text)}\n            style={{ position: \"relative\" }}\n            disabled={loading}\n          >\n            {loading ? (\n              <LinearProgress\n                variant=\"indeterminate\"\n                style={{ position: \"absolute\", top: 0, left: 0, width: \"100%\" }}\n              />\n            ) : null}\n            Save\n          </Button>\n        </Box>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","import React from \"react\";\nimport DataHocTodoControls from \"./controls\";\nimport TodoList from \"../Components/Todos/List\";\nimport TodoItem from \"../Components/Todos/Item\";\nimport TodoCreate from \"../Components/Todos/Create\";\nimport TodoUpdate from \"../Components/Todos/Update\";\nimport Pagination from \"@material-ui/lab/Pagination\";\n\nexport const DataHocTodoList = () => {\n  return (\n    <DataHocTodoControls.Provider>\n      <DataHocTodoControls.Context.Consumer>\n        {(controls) =>\n          controls ? (\n            <>\n              <TodoList\n                title=\"Context\"\n                action={\n                  <TodoCreate\n                    text={controls.createText}\n                    setText={controls.setCreateText}\n                    createTodo={controls.createTodo}\n                    loading={controls.create.loading}\n                    error={controls.create.error}\n                  />\n                }\n                footer={\n                  <Pagination\n                    page={controls.page}\n                    count={controls.pagedTodoCount}\n                    onChange={(ev, nextPage) => controls.setPage(nextPage)}\n                  />\n                }\n              >\n                {controls.pagedTodoList.map((todo) => (\n                  <TodoItem\n                    key={todo.id}\n                    todo={todo}\n                    toggleTodo={controls.toggleTodo}\n                    updateTodo={controls.updateTodo}\n                    removeTodo={controls.removeTodo}\n                  />\n                ))}\n              </TodoList>\n              <TodoUpdate\n                open={Boolean(controls.updating)}\n                text={controls.updateText}\n                setText={controls.setUpdateText}\n                saveText={(text) =>\n                  controls.saveTodo(controls.updating, { text })\n                }\n                onClose={controls.closeUpdate}\n                loading={controls.save.loading}\n                error={controls.save.error}\n              />\n            </>\n          ) : null\n        }\n      </DataHocTodoControls.Context.Consumer>\n    </DataHocTodoControls.Provider>\n  );\n};\n","import { atom, selector } from \"recoil\";\nimport { ITodo, initialTodoList } from \"../todoUtils\";\n\ninterface Async<V> {\n  loading: boolean;\n  data: V | null;\n  error: string;\n}\n\nexport const createTextState = atom<string>({\n  key: \"createText\",\n  default: \"\",\n});\n\nexport const createState = atom<Async<ITodo>>({\n  key: \"create\",\n  default: {\n    loading: false,\n    data: null,\n    error: \"\",\n  },\n});\n\nexport const updateTextState = atom<string>({\n  key: \"updateText\",\n  default: \"\",\n});\n\nexport const saveState = atom<Async<ITodo>>({\n  key: \"save\",\n  default: {\n    loading: false,\n    data: null,\n    error: \"\",\n  },\n});\n\nexport const updatingState = atom<null | ITodo>({\n  key: \"updating\",\n  default: null,\n});\n\nexport const todoListState = atom<ITodo[]>({\n  key: \"todoList\",\n  default: initialTodoList,\n});\n\nexport const pageState = atom<number>({\n  key: \"page\",\n  default: 1,\n});\n\nexport const perPageState = atom<number>({\n  key: \"perPage\",\n  default: 10,\n});\n\nexport const pagedTodoCountState = selector({\n  key: \"pagedTodoCountState\",\n  get: ({ get }) => {\n    const perPage = get(perPageState);\n    const list = get(todoListState);\n    return Math.ceil(list.length / perPage);\n  },\n});\n\nexport const pagedTodoListState = selector({\n  key: \"pagedTodoListState\",\n  get: ({ get }) => {\n    const page = get(pageState);\n    const perPage = get(perPageState);\n    const list = get(todoListState);\n    return list.slice((page - 1) * perPage, (page - 1) * perPage + perPage)\n  },\n});\n","import React, { FC } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport {\n  todoListState,\n  createTextState,\n  createState,\n  saveState,\n  updatingState,\n  updateTextState,\n  pageState,\n  pagedTodoCountState,\n  pagedTodoListState,\n} from \"./atoms\";\nimport {\n  useCreateTodo,\n  useUpdateTodo,\n  useRemoveTodo,\n  useCloseUpdate,\n  useSaveTodo,\n  useToggleTodo,\n  useSetUpdateText,\n  useSetCreateText,\n  useSetPage,\n} from \"./actions\";\nimport TodoList from \"../Components/Todos/List\";\nimport TodoItem from \"../Components/Todos/Item\";\nimport TodoCreate from \"../Components/Todos/Create\";\nimport TodoUpdate from \"../Components/Todos/Update\";\nimport Pagination from \"@material-ui/lab/Pagination\";\n\nconst RecoilList = () => {\n  const page = useRecoilValue(pageState);\n  const createText = useRecoilValue(createTextState);\n  const create = useRecoilValue(createState);\n  const pageCount = useRecoilValue(pagedTodoCountState);\n  const pagedTodoList = useRecoilValue(pagedTodoListState);\n  const setPage = useSetPage();\n  const setCreateText = useSetCreateText();\n  const createTodo = useCreateTodo();\n  const updateTodo = useUpdateTodo();\n  const toggleTodo = useToggleTodo();\n  const removeTodo = useRemoveTodo();\n  return (\n    <TodoList\n      title=\"Recoil\"\n      action={\n        <TodoCreate\n          text={createText}\n          setText={setCreateText}\n          createTodo={createTodo}\n          loading={create.loading}\n          error={create.error}\n        />\n      }\n      footer={\n        <Pagination\n          page={page}\n          count={pageCount}\n          onChange={(ev, nextPage) => setPage(nextPage)}\n        />\n      }\n    >\n      {pagedTodoList.map((todo) => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          toggleTodo={toggleTodo}\n          updateTodo={updateTodo}\n          removeTodo={removeTodo}\n        />\n      ))}\n    </TodoList>\n  );\n};\n\nconst RecoilUpdate = () => {\n  const updating = useRecoilValue(updatingState);\n  const updateText = useRecoilValue(updateTextState);\n  const save = useRecoilValue(saveState);\n  const setUpdateText = useSetUpdateText();\n  const saveTodo = useSaveTodo();\n  const closeUpdate = useCloseUpdate();\n  return (\n    <TodoUpdate\n      open={Boolean(updating)}\n      text={updateText}\n      setText={setUpdateText}\n      saveText={(text) => saveTodo(updating, { text })}\n      onClose={closeUpdate}\n      loading={save.loading}\n      error={save.error}\n    />\n  );\n};\n\nexport const RecoilTodoList: FC = () => {\n  return (\n    <>\n      <RecoilList />\n      <RecoilUpdate />\n    </>\n  );\n};\n\nexport default RecoilTodoList;\n","import {\n  useRecoilValue,\n  useSetRecoilState,\n} from \"recoil\";\nimport { ITodo, wait, buildTodo } from \"../todoUtils\";\nimport {\n  todoListState,\n  createState,\n  createTextState,\n  saveState,\n  updateTextState,\n  updatingState,\n  pageState,\n  perPageState,\n} from \"./atoms\";\n\nexport const useSetPage = () => {\n  const setPage = useSetRecoilState(pageState);\n  return setPage\n}\nexport const useSetPerPage = () => {\n  const setPerPage = useSetRecoilState(perPageState);\n  return setPerPage\n}\n\nexport const useSetCreateText = () => {\n  const setCreateText = useSetRecoilState(createTextState);\n  return setCreateText\n}\n\nexport const useCreateTodo = () => {\n  const setTodoList = useSetRecoilState(todoListState);\n  const setCreateText = useSetRecoilState(createTextState);\n  const setCreate = useSetRecoilState(createState);\n  const createTodo = async (text: string) => {\n    try {\n      setCreate({ loading: true, data: null, error: '' })\n      if (!text) {\n        throw new Error(\"Text is required\");\n      }\n      const newTodo = buildTodo(text)\n      await wait(1000);\n      setTodoList((list) => list.concat(newTodo));\n      setCreateText(\"\");\n      setCreate({ loading: false, data: newTodo, error: '' })\n      return newTodo;\n    } catch (e) {\n      setCreate({ loading: false, data: null, error: e.message })\n    }\n  };\n  return createTodo;\n};\n\nexport const useSetUpdateText = () => {\n  const setUpdateText = useSetRecoilState(updateTextState);\n  return setUpdateText\n}\n\nexport const useSaveTodo = () => {\n  const todoList = useRecoilValue(todoListState);\n  const setTodoList = useSetRecoilState(todoListState);\n  const setUpdating = useSetRecoilState(updatingState);\n  const setSave = useSetRecoilState(saveState);\n  const saveTodo = async (todo: ITodo | null, update: Partial<ITodo>) => {\n    try {\n      setSave({ loading: true, data: null, error: '' })\n      const todoIndex = todoList.findIndex(_todo => todo === _todo)\n      if (todoIndex === -1) {\n        throw new Error(\"Todo not found\");\n      }\n      if (typeof update.text === 'string' && !update.text) {\n        throw new Error(\"Text is required\");\n      }\n      const newTodo = { ...todoList[todoIndex], ...update }\n      const newList = todoList.slice(0)\n      newList[todoIndex] = newTodo\n      await wait(1000);\n      setTodoList(newList);\n      setUpdating(null);\n      setSave({ loading: false, data: newTodo, error: '' })\n      return newTodo;\n    } catch (e) {\n      setSave({ loading: false, data: null, error: e.message })\n    }\n  };\n  return saveTodo;\n};\n\nexport const useRemoveTodo = () => {\n  const setTodoList = useSetRecoilState(todoListState);\n  const removeTodo = (todo: ITodo) => {\n    setTodoList((list) => list.filter((_todo) => todo !== _todo));\n    return todo;\n  };\n  return removeTodo;\n};\n\nexport const useToggleTodo = () => {\n  const setTodoList = useSetRecoilState(todoListState);\n  const toggleTodo = (todo: ITodo) => {\n    setTodoList((list) =>\n      list\n        .slice(0)\n        .map((_todo) =>\n          todo !== _todo ? _todo : { ..._todo, complete: !_todo.complete }\n        )\n    );\n    return todo;\n  };\n  return toggleTodo;\n};\n\nexport const useUpdateTodo = () => {\n  const setUpdateText = useSetRecoilState(updateTextState);\n  const setUpdating = useSetRecoilState(updatingState);\n  const updateTodo = (todo: ITodo) => {\n    setUpdateText(todo.text);\n    setUpdating(todo);\n  }\n  return updateTodo\n};\n\nexport const useCloseUpdate = () => {\n  const setUpdating = useSetRecoilState(updatingState);\n  const closeUpdate = () => {\n    setUpdating(null);\n  }\n  return closeUpdate\n};","import { hawk, hawkeye, useHawkSetState, useHawkState } from 'react-hawk'\nimport { ITodo, initialTodoList } from \"../todoUtils\";\n\ninterface Async<V> {\n  loading: boolean;\n  data: V | null;\n  error: string;\n}\n\nexport const createTextState = hawk<string>({\n  key: \"createText\",\n  default: \"\",\n});\n\nexport const createState = hawk<Async<ITodo>>({\n  key: \"create\",\n  default: {\n    loading: false,\n    data: null,\n    error: \"\",\n  },\n});\n\nexport const updateTextState = hawk<string>({\n  key: \"updateText\",\n  default: \"\",\n});\n\nexport const saveState = hawk<Async<ITodo>>({\n  key: \"save\",\n  default: {\n    loading: false,\n    data: null,\n    error: \"\",\n  },\n});\n\nexport const updatingState = hawk<null | ITodo>({\n  key: \"updating\",\n  default: null,\n});\n\nexport const todoListState = hawk<ITodo[]>({\n  key: \"todoList\",\n  default: initialTodoList,\n});\n\nexport const pageState = hawk<number>({\n  key: \"page\",\n  default: 1,\n});\n\nexport const perPageState = hawk<number>({\n  key: \"perPage\",\n  default: 10,\n});\n\nexport const pagedTodoCountState = hawkeye<number>({\n  key: \"pagedTodoCountState\",\n  get: ({ get }) => {\n    const perPage = get(perPageState);\n    const list = get(todoListState);\n    return Math.ceil(list.length / perPage);\n  },\n});\n\nexport const pagedTodoListState = hawkeye<ITodo[]>({\n  key: \"pagedTodoListState\",\n  get: ({ get }) => {\n    const page = get(pageState);\n    const perPage = get(perPageState);\n    const list = get(todoListState);\n    return list.slice((page - 1) * perPage, (page - 1) * perPage + perPage)\n  },\n});","import React, { FC } from \"react\";\nimport { useHawkState, useHawkSetState } from \"react-hawk\";\nimport {\n  todoListState,\n  createTextState,\n  createState,\n  saveState,\n  updatingState,\n  updateTextState,\n  pageState,\n  pagedTodoCountState,\n  pagedTodoListState,\n} from \"./state\";\nimport {\n  useCreateTodo,\n  useUpdateTodo,\n  useRemoveTodo,\n  useCloseUpdate,\n  useSaveTodo,\n  useToggleTodo,\n  useSetUpdateText,\n  useSetCreateText,\n  useSetPage,\n} from \"./actions\";\nimport TodoList from \"../Components/Todos/List\";\nimport TodoItem from \"../Components/Todos/Item\";\nimport TodoCreate from \"../Components/Todos/Create\";\nimport TodoUpdate from \"../Components/Todos/Update\";\nimport Pagination from \"@material-ui/lab/Pagination\";\n\nconst HawkList = () => {\n  const page = useHawkState(pageState);\n  const createText = useHawkState(createTextState);\n  const create = useHawkState(createState);\n  const pageCount = useHawkState(pagedTodoCountState);\n  const pagedTodoList = useHawkState(pagedTodoListState);\n  const setPage = useSetPage();\n  const setCreateText = useSetCreateText();\n  const createTodo = useCreateTodo();\n  const updateTodo = useUpdateTodo();\n  const toggleTodo = useToggleTodo();\n  const removeTodo = useRemoveTodo();\n  return (\n    <TodoList\n      title=\"Hawk\"\n      action={\n        <TodoCreate\n          text={createText}\n          setText={setCreateText}\n          createTodo={createTodo}\n          loading={create.loading}\n          error={create.error}\n        />\n      }\n      footer={\n        <Pagination\n          page={page}\n          count={pageCount}\n          onChange={(ev, nextPage) => setPage(nextPage)}\n        />\n      }\n    >\n      {pagedTodoList.map((todo) => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          toggleTodo={toggleTodo}\n          updateTodo={updateTodo}\n          removeTodo={removeTodo}\n        />\n      ))}\n    </TodoList>\n  );\n};\n\nconst HawkUpdate = () => {\n  const updating = useHawkState(updatingState);\n  const updateText = useHawkState(updateTextState);\n  const save = useHawkState(saveState);\n  const setUpdateText = useSetUpdateText();\n  const saveTodo = useSaveTodo();\n  const closeUpdate = useCloseUpdate();\n  return (\n    <TodoUpdate\n      open={Boolean(updating)}\n      text={updateText}\n      setText={setUpdateText}\n      saveText={(text) => saveTodo(updating, { text })}\n      onClose={closeUpdate}\n      loading={save.loading}\n      error={save.error}\n    />\n  );\n};\n\nexport const HawkTodoList: FC = () => {\n  return (\n    <>\n      <HawkList />\n      <HawkUpdate />\n    </>\n  );\n};\n\nexport default HawkTodoList;\n","import {\n  useHawkState,\n  useHawkSetState,\n} from \"react-hawk\";\nimport { ITodo, wait, buildTodo } from \"../todoUtils\";\nimport {\n  todoListState,\n  createState,\n  createTextState,\n  saveState,\n  updateTextState,\n  updatingState,\n  pageState,\n  perPageState,\n} from \"./state\";\n\nexport const useSetPage = () => {\n  const setPage = useHawkSetState(pageState);\n  return setPage\n}\nexport const useSetPerPage = () => {\n  const setPerPage = useHawkSetState(perPageState);\n  return setPerPage\n}\n\nexport const useSetCreateText = () => {\n  const setCreateText = useHawkSetState(createTextState);\n  return setCreateText\n}\n\nexport const useCreateTodo = () => {\n  const setTodoList = useHawkSetState(todoListState);\n  const setCreateText = useHawkSetState(createTextState);\n  const setCreate = useHawkSetState(createState);\n  const createTodo = async (text: string) => {\n    try {\n      setCreate({ loading: true, data: null, error: '' })\n      if (!text) {\n        throw new Error(\"Text is required\");\n      }\n      const newTodo = buildTodo(text)\n      await wait(1000);\n      setTodoList((list) => list.concat(newTodo));\n      setCreateText(\"\");\n      setCreate({ loading: false, data: newTodo, error: '' })\n      return newTodo;\n    } catch (e) {\n      setCreate({ loading: false, data: null, error: e.message })\n    }\n  };\n  return createTodo;\n};\n\nexport const useSetUpdateText = () => {\n  const setUpdateText = useHawkSetState(updateTextState);\n  return setUpdateText\n}\n\nexport const useSaveTodo = () => {\n  const todoList = useHawkState(todoListState);\n  const setTodoList = useHawkSetState(todoListState);\n  const setUpdating = useHawkSetState(updatingState);\n  const setSave = useHawkSetState(saveState);\n  const saveTodo = async (todo: ITodo | null, update: Partial<ITodo>) => {\n    try {\n      setSave({ loading: true, data: null, error: '' })\n      const todoIndex = todoList.findIndex(_todo => todo === _todo)\n      if (todoIndex === -1) {\n        throw new Error(\"Todo not found\");\n      }\n      if (typeof update.text === 'string' && !update.text) {\n        throw new Error(\"Text is required\");\n      }\n      const newTodo = { ...todoList[todoIndex], ...update }\n      const newList = todoList.slice(0)\n      newList[todoIndex] = newTodo\n      await wait(1000);\n      setTodoList(newList);\n      setUpdating(null);\n      setSave({ loading: false, data: newTodo, error: '' })\n      return newTodo;\n    } catch (e) {\n      setSave({ loading: false, data: null, error: e.message })\n    }\n  };\n  return saveTodo;\n};\n\nexport const useRemoveTodo = () => {\n  const setTodoList = useHawkSetState(todoListState);\n  const removeTodo = (todo: ITodo) => {\n    setTodoList((list) => list.filter((_todo) => todo !== _todo));\n    return todo;\n  };\n  return removeTodo;\n};\n\nexport const useToggleTodo = () => {\n  const setTodoList = useHawkSetState(todoListState);\n  const toggleTodo = (todo: ITodo) => {\n    setTodoList((list) =>\n      list\n        .slice(0)\n        .map((_todo) =>\n          todo !== _todo ? _todo : { ..._todo, complete: !_todo.complete }\n        )\n    );\n    return todo;\n  };\n  return toggleTodo;\n};\n\nexport const useUpdateTodo = () => {\n  const setUpdateText = useHawkSetState(updateTextState);\n  const setUpdating = useHawkSetState(updatingState);\n  const updateTodo = (todo: ITodo) => {\n    setUpdateText(todo.text);\n    setUpdating(todo);\n  }\n  return updateTodo\n};\n\nexport const useCloseUpdate = () => {\n  const setUpdating = useHawkSetState(updatingState);\n  const closeUpdate = () => {\n    setUpdating(null);\n  }\n  return closeUpdate\n};","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { DataHocTodoList } from \"./DataHocTodos\";\nimport { RecoilTodoList } from \"./RecoilTodos\";\nimport { HawkTodoList } from \"./HawkTodos\";\nimport { RecoilRoot } from \"recoil\";\nimport { Typography } from \"@material-ui/core\";\n\nconst background =\n  \"linear-gradient(rgba(245, 0, 87, 0.8), rgba(63, 81, 181, 0.8))\";\n\nfunction App() {\n  return (\n    <>\n      <a href=\"https://github.com/rphansen91/react-hawk\" style={{ position: 'absolute', top: 0, right: 0 }}>\n        <img\n          width=\"149\"\n          height=\"149\"\n          src=\"https://github.blog/wp-content/uploads/2008/12/forkme_right_gray_6d6d6d.png?resize=149%2C149\"\n          className=\"attachment-full size-full\"\n          alt=\"Fork me on GitHub\"\n          data-recalc-dims=\"1\"\n        />\n      </a>\n      <Box\n        width=\"100%\"\n        style={{\n          padding: \"4em 2em\",\n          background,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n          boxSizing: 'border-box'\n        }}\n      >\n        <Typography variant=\"h2\" style={{ color: \"#fff\" }}>\n          Todo List\n        </Typography>\n        <Typography variant=\"h4\" style={{ color: \"#fff\" }}>\n          Context vs Recoil vs Hawk\n        </Typography>\n      </Box>\n      <Box p={3}>\n        <Grid container spacing={3}>\n          <Grid item md={4}>\n            <DataHocTodoList />\n          </Grid>\n          <Grid item md={4}>\n            <RecoilRoot>\n              <RecoilTodoList />\n            </RecoilRoot>\n          </Grid>\n          <Grid item md={4}>\n            <RecoilRoot>\n              <HawkTodoList />\n            </RecoilRoot>\n          </Grid>\n        </Grid>\n      </Box>\n      <Box width=\"100%\" style={{ paddingTop: \"20%\", background }} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}